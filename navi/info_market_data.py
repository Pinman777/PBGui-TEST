import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from MarketDataManager import MarketDataManager
from datetime import datetime, timedelta
from pbgui_purefunc import save_ini, load_ini
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def get_market_data_manager():
    return MarketDataManager()

mdm = get_market_data_manager()

st.title("üåç –ú–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –†—ã–Ω–æ—á–Ω—ã–µ –î–∞–Ω–Ω—ã–µ")

tabs = st.tabs(["–ú—É–ª—å—Ç–∏–±–∏—Ä–∂–µ–≤–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä", "–ê—Ä–±–∏—Ç—Ä–∞–∂", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"])

with tabs[0]:
    st.header("–ú—É–ª—å—Ç–∏–±–∏—Ä–∂–µ–≤–æ–π –ü—Ä–æ—Å–º–æ—Ç—Ä")
    
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        symbol = st.text_input("–°–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT):", "BTCUSDT")
    with col2:
        timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º:", ["1m", "5m", "15m", "30m", "1h", "4h", "1d"])
    with col3:
        days = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:", min_value=1, max_value=90, value=30)
    
    if st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
        with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂..."):
            try:
                data = mdm.get_all_data_for_symbol(symbol, timeframe, days)
                
                if not data:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                else:
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
                    price_data = []
                    for exchange, exchange_data in data.items():
                        if "error" not in exchange_data:
                            price_data.append({
                                "–ë–∏—Ä–∂–∞": exchange,
                                "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞": exchange_data.get("current_price"),
                                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)": exchange_data.get("price_change_percent"),
                                "–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º": exchange_data.get("volume_avg")
                            })
                    
                    if price_data:
                        price_df = pd.DataFrame(price_data)
                        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö")
                        st.dataframe(price_df, use_container_width=True)
                        
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
                        fig = go.Figure()
                        
                        for exchange, exchange_data in data.items():
                            if "error" not in exchange_data and "ohlcv" in exchange_data:
                                ohlcv = exchange_data["ohlcv"]
                                timestamps = [datetime.fromtimestamp(ts/1000) for ts, _, _, _, _, _ in ohlcv]
                                close_prices = [close for _, _, _, _, close, _ in ohlcv]
                                fig.add_trace(go.Scatter(
                                    x=timestamps,
                                    y=close_prices,
                                    mode='lines',
                                    name=exchange
                                ))
                        
                        fig.update_layout(
                            title=f"{symbol} - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è ({timeframe})",
                            xaxis_title="–î–∞—Ç–∞",
                            yaxis_title="–¶–µ–Ω–∞",
                            hovermode="x unified"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏
                        exchanges = [e for e in data.keys() if "error" not in data[e]]
                        if len(exchanges) > 1:
                            st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
                            corr_data = {}
                            
                            for exchange in exchanges:
                                if "ohlcv" in data[exchange]:
                                    corr_data[exchange] = [close for _, _, _, _, close, _ in data[exchange]["ohlcv"]]
                            
                            if corr_data:
                                corr_df = pd.DataFrame(corr_data)
                                correlation_matrix = corr_df.corr()
                                
                                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                                fig = go.Figure(data=go.Heatmap(
                                    z=correlation_matrix.values,
                                    x=correlation_matrix.columns,
                                    y=correlation_matrix.index,
                                    colorscale='Viridis',
                                    zmin=-1, zmax=1,
                                    text=np.round(correlation_matrix.values, 3),
                                    texttemplate="%{text}",
                                    showscale=True
                                ))
                                fig.update_layout(
                                    title="–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏",
                                    width=600,
                                    height=600
                                )
                                st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

with tabs[1]:
    st.header("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    
    col1, col2 = st.columns(2)
    with col1:
        min_diff = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ (%)", min_value=0.1, max_value=5.0, value=0.5, step=0.1)
    with col2:
        quote_currency = st.selectbox("–í–∞–ª—é—Ç–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏:", ["USDT", "USDC", "BUSD", "TUSD"])
    
    if st.button("–ù–∞–π—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", type="primary"):
        with st.spinner("–ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π..."):
            try:
                opportunities = mdm.get_arbitrage_opportunities(min_diff, quote_currency)
                
                if not opportunities:
                    st.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –æ—Ç {min_diff}%")
                else:
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
                    arb_data = []
                    for opp in opportunities:
                        arb_data.append({
                            "–°–∏–º–≤–æ–ª": opp["symbol"],
                            "–ë–∏—Ä–∂–∞ (–ø–æ–∫—É–ø–∫–∞)": opp["buy_exchange"],
                            "–¶–µ–Ω–∞ (–ø–æ–∫—É–ø–∫–∞)": opp["buy_price"],
                            "–ë–∏—Ä–∂–∞ (–ø—Ä–æ–¥–∞–∂–∞)": opp["sell_exchange"],
                            "–¶–µ–Ω–∞ (–ø—Ä–æ–¥–∞–∂–∞)": opp["sell_price"],
                            "–†–∞–∑–Ω–∏—Ü–∞ (%)": opp["difference_percent"]
                        })
                    
                    st.subheader(f"–ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                    arb_df = pd.DataFrame(arb_data)
                    st.dataframe(arb_df, use_container_width=True)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
                    if len(opportunities) > 0:
                        top_opportunities = opportunities[:5] if len(opportunities) > 5 else opportunities
                        
                        fig = go.Figure()
                        symbols = [opp["symbol"] for opp in top_opportunities]
                        diff_pcts = [opp["difference_percent"] for opp in top_opportunities]
                        
                        fig.add_trace(go.Bar(
                            x=symbols,
                            y=diff_pcts,
                            text=np.round(diff_pcts, 2),
                            textposition='auto',
                            marker_color='lightseagreen'
                        ))
                        
                        fig.update_layout(
                            title="–¢–æ–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                            xaxis_title="–°–∏–º–≤–æ–ª",
                            yaxis_title="–†–∞–∑–Ω–∏—Ü–∞ (%)",
                            yaxis=dict(range=[0, max(diff_pcts) * 1.1])
                        )
                        st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {str(e)}")

with tabs[2]:
    st.header("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –î–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    with col1:
        sync_symbol = st.text_input("–°–∏–º–≤–æ–ª –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", "BTCUSDT")
    with col2:
        sync_timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", ["1m", "5m", "15m", "30m", "1h", "4h", "1d"])
    
    if st.button("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
        with st.spinner("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏..."):
            try:
                results = mdm.synchronize_exchanges(sync_symbol, sync_timeframe)
                
                if not results:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                else:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    exchange_results = {k: v for k, v in results.items() if "status" in v and v["status"] == "success"}
                    
                    if exchange_results:
                        # –¢–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö
                        price_data = []
                        for exchange, result in exchange_results.items():
                            price_data.append({
                                "–ë–∏—Ä–∂–∞": exchange,
                                "–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞": result["last_price"],
                                "–û–±—ä–µ–º (24—á)": result["volume_24h"]
                            })
                        
                        st.subheader("–¶–µ–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö")
                        price_df = pd.DataFrame(price_data)
                        st.dataframe(price_df, use_container_width=True)
                        
                        # –¢–∞–±–ª–∏—Ü–∞ —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏
                        corr_data = []
                        for key, value in results.items():
                            if "_vs_" in key:  # –≠—Ç–æ –∑–∞–ø–∏—Å—å –æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                                exchanges = key.split("_vs_")
                                corr_data.append({
                                    "–ë–∏—Ä–∂–∞ 1": exchanges[0],
                                    "–ë–∏—Ä–∂–∞ 2": exchanges[1],
                                    "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è": value["correlation"],
                                    "–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω": value["price_ratio"],
                                    "–†–∞–∑–Ω–∏—Ü–∞ (%)": value["price_difference_percent"]
                                })
                        
                        if corr_data:
                            st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏")
                            corr_df = pd.DataFrame(corr_data)
                            st.dataframe(corr_df, use_container_width=True)
                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    st.divider()
    
    st.subheader("–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    with col1:
        selected_exchanges = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
            list(mdm.supported_exchanges.keys()),
            default=["binance", "bybit"]
        )
    with col2:
        selected_timeframes = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
            ["1m", "5m", "15m", "30m", "1h", "4h", "1d"],
            default=["1h", "4h", "1d"]
        )
    
    symbols_text = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤):",
        height=100
    )
    selected_symbols = [s.strip() for s in symbols_text.split("\n") if s.strip()] if symbols_text else None
    
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", type="primary"):
        if not selected_exchanges:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±–∏—Ä–∂—É")
        elif not selected_timeframes:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º")
        else:
            with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
                try:
                    results = mdm.update_market_data(selected_exchanges, selected_symbols, selected_timeframes)
                    
                    if not results:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    else:
                        success_count = 0
                        error_count = 0
                        
                        for exchange, exchange_results in results.items():
                            if "status" in exchange_results and exchange_results["status"] == "error":
                                st.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –±–∏—Ä–∂–∏ {exchange}: {exchange_results['message']}")
                                error_count += 1
                                continue
                            
                            if "symbols" in exchange_results:
                                for symbol, symbol_results in exchange_results["symbols"].items():
                                    ticker_status = symbol_results["ticker"]
                                    if "error" in ticker_status:
                                        error_count += 1
                                    else:
                                        success_count += 1
                        
                        st.success(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

with tabs[3]:
    st.header("–≠–∫—Å–ø–æ—Ä—Ç –î–∞–Ω–Ω—ã—Ö")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        export_exchange = st.selectbox("–ë–∏—Ä–∂–∞:", list(mdm.supported_exchanges.keys()))
    with col2:
        export_symbol = st.text_input("–°–∏–º–≤–æ–ª:", "BTCUSDT")
    with col3:
        export_timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º:", ["1m", "5m", "15m", "30m", "1h", "4h", "1d"])
    
    col1, col2 = st.columns(2)
    with col1:
        export_days = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:", min_value=1, max_value=365, value=30)
    with col2:
        export_filename = st.text_input("–ò–º—è —Ñ–∞–π–ª–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ):", "")
    
    if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV", type="primary"):
        with st.spinner("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."):
            try:
                filename = None if not export_filename else export_filename
                filepath = mdm.export_data_to_csv(
                    export_exchange, export_symbol, export_timeframe, export_days, filename)
                
                st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filepath}")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                try:
                    df = pd.read_csv(filepath)
                    st.dataframe(df, use_container_width=True)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                    fig = go.Figure(data=[go.Candlestick(
                        x=df['datetime'],
                        open=df['open'],
                        high=df['high'],
                        low=df['low'],
                        close=df['close']
                    )])
                    
                    fig.update_layout(
                        title=f"{export_symbol} –Ω–∞ {export_exchange} ({export_timeframe})",
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–¶–µ–Ω–∞",
                        xaxis_rangeslider_visible=False
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                        data=open(filepath, 'rb').read(),
                        file_name=os.path.basename(filepath),
                        mime="text/csv",
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
if st.sidebar.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
    mdm.refresh_exchanges()
    st.sidebar.success("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω")

# –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º
st.sidebar.divider()
st.sidebar.subheader("–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º")
for exchange_name, exchange in mdm.exchanges.items():
    if exchange.user and exchange.user.key != 'key':
        st.sidebar.success(f"‚úÖ {exchange_name} ({exchange.user.name})")
    else:
        st.sidebar.warning(f"‚ö†Ô∏è {exchange_name} (–±–µ–∑ API)")

# –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
st.sidebar.divider()
if st.sidebar.button("–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    with st.sidebar.status("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
        try:
            result = mdm.update_market_data()
            st.sidebar.write("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            
# –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
st.sidebar.divider()
st.sidebar.info("""
**–ú–æ–¥—É–ª—å –†—ã–Ω–æ—á–Ω—ã–µ –î–∞–Ω–Ω—ã–µ**

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂:
- –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º—ã
- –ò—Å–∫–∞—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏
- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
""") 