import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import json
import os
from datetime import datetime, timedelta
from MarketDataManager import MarketDataManager
from StrategyManager import StrategyManager, Strategy
from pbgui_purefunc import save_ini, load_ini

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
@st.cache_resource
def get_market_data_manager():
    return MarketDataManager()

@st.cache_resource
def get_strategy_manager(_mdm):
    return StrategyManager(_mdm)

mdm = get_market_data_manager()
sm = get_strategy_manager(mdm)

st.title("üíπ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –°—Ç—Ä–∞—Ç–µ–≥–∏–π")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if "current_strategy_id" not in st.session_state:
    st.session_state.current_strategy_id = None
if "code_changed" not in st.session_state:
    st.session_state.code_changed = False
if "editor_height" not in st.session_state:
    st.session_state.editor_height = 400

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def on_strategy_select():
    if st.session_state.strategy_selector != st.session_state.current_strategy_id:
        if st.session_state.code_changed:
            st.warning("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
            return
        st.session_state.current_strategy_id = st.session_state.strategy_selector
        st.session_state.code_changed = False

def on_code_change():
    st.session_state.code_changed = True

def create_new_strategy():
    if st.session_state.new_strategy_name.strip():
        strategy = sm.create_strategy(
            st.session_state.new_strategy_name,
            st.session_state.new_strategy_description,
            st.session_state.new_strategy_author
        )
        st.session_state.current_strategy_id = strategy.id
        st.session_state.code_changed = False
        st.rerun()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
with st.sidebar:
    # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    strategies = sm.list_strategies()
    strategy_options = {s.id: f"{s.name} ({s.author})" for s in strategies}
    
    if strategy_options:
        st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:",
            options=list(strategy_options.keys()),
            format_func=lambda x: strategy_options[x],
            key="strategy_selector",
            on_change=on_strategy_select
        )
    else:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.")
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    with st.expander("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"):
        st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", key="new_strategy_name")
        st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:", key="new_strategy_description")
        st.text_input("–ê–≤—Ç–æ—Ä:", key="new_strategy_author")
        if st.button("–°–æ–∑–¥–∞—Ç—å", use_container_width=True):
            create_new_strategy()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    st.divider()
    st.slider("–í—ã—Å–æ—Ç–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞:", 200, 800, st.session_state.editor_height, 50, 
             key="editor_height_slider", on_change=lambda: setattr(st.session_state, "editor_height", st.session_state.editor_height_slider))

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
tabs = st.tabs(["–†–µ–¥–∞–∫—Ç–æ—Ä", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
current_strategy = sm.get_strategy(st.session_state.current_strategy_id) if st.session_state.current_strategy_id else None

# –®–∞–±–ª–æ–Ω –∫–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_code = """# –°—Ç—Ä–∞—Ç–µ–≥–∏—è –±–æ—Ç–∞
# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
# df_<exchange>_<symbol>_<timeframe> - DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ (timestamp, open, high, low, close, volume, datetime)
# params - —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# log(message) - –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
# add_signal(exchange, symbol, side, price, amount, reason, timeframe) - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

# –ü—Ä–∏–º–µ—Ä: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
for exchange in params["exchanges"]:
    for symbol in params["symbols"]:
        for timeframe in params["timeframes"]:
            df = data[f"{exchange}_{symbol}_{timeframe}"]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df['sma_fast'] = df['close'].rolling(window=params["fast_period"]).mean()
            df['sma_slow'] = df['close'].rolling(window=params["slow_period"]).mean()
            
            # –ò—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (–∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã)
            df['signal'] = 0
            df.loc[df['sma_fast'] > df['sma_slow'], 'signal'] = 1
            df.loc[df['sma_fast'] < df['sma_slow'], 'signal'] = -1
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞)
            df['signal_change'] = df['signal'].diff()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
            last_row = df.iloc[-1]
            prev_row = df.iloc[-2] if len(df) > 1 else None
            
            if prev_row is not None:
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: –±—ã—Å—Ç—Ä–∞—è SMA –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é SMA —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                if last_row['signal_change'] == 2:
                    log(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è {symbol} –Ω–∞ {exchange} ({timeframe})")
                    add_signal(
                        exchange=exchange,
                        symbol=symbol,
                        side="buy",
                        price=last_row['close'],
                        amount=params["position_size"],
                        reason="SMA Fast –ø–µ—Ä–µ—Å–µ–∫–ª–∞ SMA Slow —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö",
                        timeframe=timeframe
                    )
                
                # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –±—ã—Å—Ç—Ä–∞—è SMA –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é SMA —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
                elif last_row['signal_change'] == -2:
                    log(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–ª—è {symbol} –Ω–∞ {exchange} ({timeframe})")
                    add_signal(
                        exchange=exchange,
                        symbol=symbol,
                        side="sell",
                        price=last_row['close'],
                        amount=params["position_size"],
                        reason="SMA Fast –ø–µ—Ä–µ—Å–µ–∫–ª–∞ SMA Slow —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑",
                        timeframe=timeframe
                    )
"""

# –í–∫–ª–∞–¥–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
with tabs[0]:
    if current_strategy:
        col1, col2 = st.columns([4, 1])
        with col1:
            st.write(f"### –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {current_strategy.name}")
        with col2:
            save_btn = st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary", use_container_width=True)
        
        # –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
        code = st.text_area(
            "–ö–æ–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:",
            value=current_strategy.code if current_strategy.code else default_code,
            height=st.session_state.editor_height,
            key="strategy_code",
            on_change=on_code_change
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if save_btn:
            current_strategy.set_code(st.session_state.strategy_code)
            sm.save_strategy(current_strategy)
            st.session_state.code_changed = False
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

# –í–∫–ª–∞–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with tabs[1]:
    if current_strategy:
        st.write(f"### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {current_strategy.name}")
        
        col1, col2 = st.columns(2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—ã–Ω–∫–æ–≤
        with col1:
            with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—ã–Ω–∫–æ–≤", expanded=True):
                # –í—ã–±–æ—Ä –±–∏—Ä–∂
                available_exchanges = list(mdm.supported_exchanges.keys())
                selected_exchanges = st.multiselect(
                    "–ë–∏—Ä–∂–∏:",
                    options=available_exchanges,
                    default=current_strategy.exchanges or ["binance"]
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂
                all_symbols = []
                for exchange_name in selected_exchanges:
                    if exchange_name in mdm.exchanges:
                        exchange = mdm.exchanges[exchange_name]
                        try:
                            exchange.load_market()
                            symbols = [s for s in exchange.swap]
                            all_symbols.extend(symbols)
                        except:
                            pass
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                unique_symbols = sorted(list(set(all_symbols)))
                
                # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤
                symbol_input = st.text_area(
                    "–°–∏–º–≤–æ–ª—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):", 
                    value="\n".join(current_strategy.symbols) if current_strategy.symbols else "BTCUSDT"
                )
                selected_symbols = [s.strip() for s in symbol_input.split("\n") if s.strip()]
                
                # –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                timeframe_options = ["1m", "5m", "15m", "30m", "1h", "4h", "1d"]
                selected_timeframes = st.multiselect(
                    "–¢–∞–π–º—Ñ—Ä–µ–π–º—ã:",
                    options=timeframe_options,
                    default=current_strategy.timeframes or ["1h"]
                )
                
                # –¢–∏–ø —Ä—ã–Ω–∫–∞
                market_type = st.selectbox(
                    "–¢–∏–ø —Ä—ã–Ω–∫–∞:",
                    options=["swap", "spot"],
                    index=0 if current_strategy.market_type == "swap" else 1
                )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        with col2:
            with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", expanded=True):
                st.write("–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
                default_params = {
                    "fast_period": 10,
                    "slow_period": 30,
                    "position_size": 0.1
                }
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                params = {**default_params, **current_strategy.parameters}
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                new_params = {}
                
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                new_params["fast_period"] = st.number_input("–ü–µ—Ä–∏–æ–¥ –±—ã—Å—Ç—Ä–æ–π SMA:", value=params.get("fast_period", 10), min_value=1)
                new_params["slow_period"] = st.number_input("–ü–µ—Ä–∏–æ–¥ –º–µ–¥–ª–µ–Ω–Ω–æ–π SMA:", value=params.get("slow_period", 30), min_value=1)
                new_params["position_size"] = st.number_input("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:", value=params.get("position_size", 0.1), min_value=0.01, step=0.01)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                with st.expander("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä"):
                    col1, col2 = st.columns(2)
                    with col1:
                        new_param_name = st.text_input("–ò–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:")
                    with col2:
                        new_param_value = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:")
                    
                    if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä") and new_param_name:
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                            value = json.loads(new_param_value)
                        except:
                            value = new_param_value
                        
                        new_params[new_param_name] = value
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
                for k, v in params.items():
                    if k not in new_params:
                        new_params[k] = v
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∏—Ä–∂–∏, —Å–∏–º–≤–æ–ª—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                new_params["exchanges"] = selected_exchanges
                new_params["symbols"] = selected_symbols
                new_params["timeframes"] = selected_timeframes
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", type="primary"):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            current_strategy.set_parameters(new_params)
            current_strategy.set_markets(selected_exchanges, selected_symbols, selected_timeframes, market_type)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            sm.save_strategy(current_strategy)
            st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

# –í–∫–ª–∞–¥–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
with tabs[2]:
    if current_strategy:
        st.write(f"### –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {current_strategy.name}")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            start_date = st.date_input(
                "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:",
                value=datetime.now() - timedelta(days=30)
            )
        
        with col2:
            end_date = st.date_input(
                "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                value=datetime.now()
            )
        
        with col3:
            initial_balance = st.number_input(
                "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (USDT):",
                min_value=100.0,
                value=10000.0,
                step=1000.0
            )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        with st.expander("–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∞"):
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            override_params = {}
            for key, value in current_strategy.parameters.items():
                if key not in ["exchanges", "symbols", "timeframes"]:
                    if isinstance(value, (int, float)):
                        override_params[key] = st.number_input(f"{key}:", value=value)
                    else:
                        override_params[key] = st.text_input(f"{key}:", value=str(value))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç", type="primary"):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ç–∫—Ç–µ—Å—Ç..."):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                start_date_str = start_date.strftime("%Y-%m-%d")
                end_date_str = end_date.strftime("%Y-%m-%d")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
                backtest_result = sm.backtest_strategy(
                    current_strategy,
                    start_date_str,
                    end_date_str,
                    initial_balance,
                    override_params
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏—é
                st.session_state.backtest_result = backtest_result
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.rerun()
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞.")

# –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
with tabs[3]:
    if current_strategy and "backtest_result" in st.session_state:
        st.write(f"### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞: {current_strategy.name}")
        
        result = st.session_state.backtest_result
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics = result["metrics"]
        
        metric_cols = st.columns(4)
        with metric_cols[0]:
            st.metric("–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{metrics['total_return_pct']:.2f}%")
        with metric_cols[1]:
            st.metric("–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", f"{metrics['annualized_return_pct']:.2f}%")
        with metric_cols[2]:
            st.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{metrics['max_drawdown_pct']:.2f}%")
        with metric_cols[3]:
            st.metric("–ö–æ—ç—Ñ. –®–∞—Ä–ø–∞", f"{metrics['sharpe_ratio']:.2f}")
        
        metric_cols = st.columns(3)
        with metric_cols[0]:
            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", f"{metrics['win_rate_pct']:.2f}%")
        with metric_cols[1]:
            st.metric("–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏", f"{metrics['profit_factor']:.2f}")
        with metric_cols[2]:
            st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", f"{metrics['total_trades']}")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª–∞
        if result["portfolio"]["equity_curve"]:
            equity_curve = pd.DataFrame(result["portfolio"]["equity_curve"])
            
            fig = px.line(
                equity_curve,
                x="datetime",
                y="value",
                title="–ö—Ä–∏–≤–∞—è –∫–∞–ø–∏—Ç–∞–ª–∞",
                labels={"value": "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è", "datetime": "–î–∞—Ç–∞"}
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        # –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
        if result["portfolio"]["trades"]:
            trades_df = pd.DataFrame(result["portfolio"]["trades"])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            trades_df["pnl_formatted"] = trades_df["pnl"].apply(lambda x: f"{x:.2f}" if "pnl" in trades_df.columns and not pd.isna(x) else "")
            trades_df["cost_formatted"] = trades_df["cost"].apply(lambda x: f"{x:.2f}")
            trades_df["price_formatted"] = trades_df["price"].apply(lambda x: f"{x:.8f}")
            
            st.subheader("–°–¥–µ–ª–∫–∏")
            
            # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö PnL
            if "pnl" in trades_df.columns:
                def color_pnl(val):
                    if pd.isna(val):
                        return ""
                    return "color: green" if val > 0 else "color: red"
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–¥–µ–ª–∫–∏
                st.dataframe(
                    trades_df.style.applymap(
                        color_pnl, 
                        subset=["pnl"] if "pnl" in trades_df.columns else []
                    ),
                    use_container_width=True
                )
            else:
                st.dataframe(trades_df, use_container_width=True)
        
        # –õ–æ–≥–∏
        if result["logs"]:
            with st.expander("–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", expanded=False):
                for log in result["logs"]:
                    st.text(log)
    else:
        if current_strategy:
            st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫—Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
with st.sidebar:
    st.divider()
    
    if current_strategy:
        # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", use_container_width=True):
            export_path = f"data/strategies/export_{current_strategy.name.replace(' ', '_')}.json"
            if sm.export_strategy(current_strategy.id, export_path):
                st.success(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {export_path}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                with open(export_path, "r") as f:
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                        data=f.read(),
                        file_name=f"{current_strategy.name.replace(' ', '_')}.json",
                        mime="application/json"
                    )
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if st.button("–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", use_container_width=True):
            if st.session_state.current_strategy_id:
                if sm.delete_strategy(st.session_state.current_strategy_id):
                    st.session_state.current_strategy_id = None
                    st.success("–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–¥–∞–ª–µ–Ω–∞")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    # –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    with st.expander("–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"):
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", type=["json"])
        if uploaded_file:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
                import_path = f"data/strategies/import_{uploaded_file.name}"
                with open(import_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                strategy = sm.import_strategy(import_path)
                if strategy:
                    st.session_state.current_strategy_id = strategy.id
                    st.success(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy.name}' —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
with st.sidebar:
    st.divider()
    st.info("""
    **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –°—Ç—Ä–∞—Ç–µ–≥–∏–π**
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂:
    - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    - –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """) 